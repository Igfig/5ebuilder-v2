{"version":3,"sources":["app/initialize.js","app/js/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"..\\js\\app.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n  // do your setup here\r\n});\r\n","var app = angular.module(\"monsterBuilder\", []);\r\napp.controller(\"monsterController\", function($scope, $http) {\r\n\t\r\n\t/* load static variables from JSON */\r\n\t$http.get(\"js/lists.json\").then(function(lists){\r\n\t\tfor (list in lists.data){\r\n\t\t\t$scope[list] = lists.data[list];\r\n\t\t}\r\n\t\t\r\n\t\t/* init variables depending on static variables */\r\n\t\t$scope.monster = {};\r\n\t\t//$scope.monster.size = $scope.SIZES[0];\r\n\t\t$scope.monster.size = $scope.SIZES['Medium'];\r\n\t\t$scope.monster.type = 'humanoid';\r\n\t\t$scope.monster.alignment = 'any alignment';\r\n\t\t$scope.monster.hd = 2;\r\n\t});\r\n\t\r\n\t$scope.abilities = [ { name : \"Str\", score : 10, mod : 0 },\r\n\t                     { name : \"Dex\", score : 10, mod : 0 }, \r\n\t                     { name : \"Con\", score : 10, mod : 0 },\r\n\t                     { name : \"Int\", score : 10, mod : 0 }, \r\n\t                     { name : \"Wis\", score : 10, mod : 0 },\r\n\t                     { name : \"Cha\", score : 10, mod : 0 } ];\r\n\t/*$scope.abilities = {\"Str\": { score : 10, mod : 0 },\r\n\t\t\t\t\t\t\"Dex\": { score : 10, mod : 0 }, \r\n\t\t\t\t\t\t\"Con\": { score : 15, mod : 0 },\r\n\t\t\t\t\t\t\"Int\": { score : 10, mod : 0 }, \r\n\t\t\t\t\t\t\"Wis\": { score : 10, mod : 0 },\r\n\t\t\t\t\t\t\"Cha\": { score : 10, mod : 0 }};*/\r\n\t\r\n\t\r\n\t\r\n\tfor (var ability in $scope.abilities) {\r\n\t\tbindModToAbility(ability);\r\n\t}\r\n\t\r\n\t\r\n\t// bind ability scores and mods\r\n\t\r\n\t//functions, but a little messy maybe?\r\n\tfunction bindModToAbility(ability) {\r\n\t\t$scope.$watch(\"abilities['\" + ability + \"'].score\", function(score) {\r\n\t\t\t$scope.abilities[ability].mod = Math.floor((score - 10) / 2);\r\n\t\t});\r\n\t}\r\n\t\r\n\t//try to do it using the local scope created by ng-repeat\r\n\t/*function bindModToAbility(ability) {\r\n\t\t$scope.$watch(\"\", function(){\r\n\t\t\t\r\n\t\t});\r\n\t}*/\r\n\t\r\n\t/*for (ability in $scope.abilities) {\r\n\t$scope.$watch(function(){return ability.score}, function(score, old, scope) {\r\n\t\tability.mod = Math.floor((score - 10) / 2);\r\n\t});\r\n\t}*/\r\n\t/*$scope.watchCollection('abilities', function(){\r\n\t\t\r\n\t});*/\r\n\t/*\r\n\t * $scope.getAbilityMod = function(ability) { return Math.floor((ability -\r\n\t * 10) / 2); }\r\n\t */\r\n});\r\n"]}